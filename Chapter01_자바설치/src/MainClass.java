/*
 * 자바 언어의 특징
 * 	1) 프로그램 언어 실행하는 방식
 * 		= 컴파일 방식 = 컴퓨터가 인식할 수 있는 언어로 변경 (2진 파일 => 0, 1)
 * 			class MainClass
 * 			{
 * 				public static void main(String[] args){
 * 				}
 * 			}
 * 
 * 			010010010
 * 			001011001
 * 			000110111
 * 
 * 			'A' => 65 1000001
 * 			=> 프로그램 언어 => 컴파일 방식을 이용
 * 				C/C++, C#, Java
 * 							l
 * 							One Write 지향.
 * 			=> 인터프리터 방식 : 한 줄씩 번역해서 처리하는 방식
 * 			 	HTML / CSS
 * 
 * 		java는 컴파일 / 인터프리터를 동시에 사용하기 때문에 보안이 뛰어나다 (소스 검증)
 * 			------------------------------------------------
 * 		자바 소스 (.java)
 * 			l
 * 			JVM ==> .calss 번역
 * 		-----------------------------------
 * 		l		l		l		l		l
 * 		리눅스	유닉스	솔라리스	Mac		Windows		=>	전부 동일한 실행 결과가 나온다.
 * 		================================================
 * 
 * 		java  ==> class	(소스 파일을 넘겨주지 않고 class 파일만 넘겨준다)
 * 
 * 		===> 실행 과정
 * 		A.java 파일 만들기
 * 			l	javac
 * 		A.class 생성
 * 			l	java
 * 		실행 결과
 * 
 * 		개발 환경 구축
 * 		1) jdk17.02	(호환성이 가장 좋은 17버전 사용 권장)	=>	jdk.java.net/14
 * 			* 높은 버전에서는 실행 가능하다 낮은 버전에서는 실행이 불가하다.	(17.02 미만 버전에서는 실행 불가.)
 * 			* 실무 : jdk1.8	(SUN의 마지막 버전) => 호환성이 상당히 좋다.
 * 			* Spring-Boot : 17 이상
 * 			* SpringFramework : 14 이하
 * 			* open 소스를 이용 => 호환성의 문제가 있어 여러 버전을 적용시키며 가능한 것을 찾아야 하는 경우가 많음.
 * 		2) 환경 설정
 * 			=> class path 	:	라이브러리 읽기 =>	.;c:\jdk-17.0.2\lib
 * 			=> path			:	실행 파일 등록 =>	c:\jdk-17.0.2\bin
 * 		3) 편집기
 * 			l	eclipse	=>	eclipse.org		=>	최신 버전 사용
 * 				=> Back-End용
 * 			l	inteliJ	
 * 				=> Full-Stack용
 * 		= 프로젝트 폴더 만들기
 * 		= src에 java class 생성
 * 		------------------------
 * 		**주의점**
 * 			1. 파일명과 클래스명이 동일해야 한다.
 * 			2. 대소문자를 구분한다.
 * 			3. 명령문(CPU)가 끝나면 반드시 ';'를 사용해야 함
 * 			4. 클래스 영문 외에 한글 사용 가능	-> 리눅스나 다른 운영체제에서는 한글 인식이 안될 대도 있다 ( 영문 사용 권장)
 * 		----------------------------------
 * 		* 암묵적인 약속 사항
 * 			1) 클래스 명은 대문자로 시작
 * 				MainClass
 * 			2) 소문자 시작
 * 				id , password
 * 			3) 모든 단어를 대문자로 한다.
 * 					ID , PASSWORD
 * 			4) 메소드 : 소문자 시작
 * 		----------------------------------
 * 		* 모든 자바 파일 실행시에는 반드시 main() 
 * 								 ----------- 실행 시작점 / 종료 지점
 * 		* 주석 : ctrl + shift + /
 * 				ctrl + shift + \
 * 		----------------------------------
 * 		자바의 구성 요소
 * 		class className => 클래스 시작
 * 			public static void main(String[] arg)	=>	프로그램 시작점
 * 			{
 * 			}
 * 		}
 * 		객체 지향 프로그램 (5장)
 * 		---------------------- class -----------------------------
 * 		----------------------------------------------------------
 * 			=>	변수
 * 		----------------------------------------------------------
 * 			=>	생성자
 * 		----------------------------------------------------------
 * 			=>	메소드
 *		----------------------------------------------------------
 *		----------------------------------------------------------
 */
public class MainClass {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		System.out.println('A');
		System.out.println((int) 'A');						//문자 'A'를 숫자로 표현
		System.out.println(Integer.toBinaryString(65));		//문자 'A'를 숫자로 표현한 65를 2진수로 표현
		System.out.println((int) '홍');						//문자 '홍'을 숫자로 표현
		System.out.println(Integer.toBinaryString(54861));	//문자 '홍'을 숫자로 표현한 54861을 2진수로 표현
	}

}