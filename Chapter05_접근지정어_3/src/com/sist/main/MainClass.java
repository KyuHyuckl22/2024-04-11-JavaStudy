package com.sist.main;
import com.sist.vo.*;
import com.sist.manager.*;
/*
 *     변수
 *     
 *      종류                             메모리에 저장되는 시점        사용범위           메모리 해제          저장 위치
 *     ----------------------------------------------------------------------------------------------------
 *     인스턴스변수 :                       new 클래스명 ()           클래스 전체        프로그램 종료시        Heap
 *                                    => 메모리 따로 저장         => 다른 클래스
 *     class A 
 *     {
 *        int a;
 *        int b;
 *        double c;
 *        static int d;
 *     }
 *     -----------------new 사용시 메모리 크기
 *                   => A는 사용자 정의 데이터형
 *                     ------------------
 *                     |16byte
 *                   => A aa=new A();
 *                        ---- aa ----
 *                           0 x 100
 *                        ------------  0 x 100  ---------
 *                                                0 => a
 *                                               ---------
 *                                                0 => b
 *                                               ---------
 *                                                0 => c
 *                                               ---------
 *                                               
 *     class A
 *     {
 *        [접근지정어] 데이터형 변수명;
 *        클래스 블록 안에서만 선언이 가능
 *     }
 *     ----------------------------------------------------------------------------------------------------
 *     정적변수(static)                         컴파일시에 메모리에 저장      자신의 클래스 전체 프로그램시 해제    MethodArea  
 *     class A                             접근 방식 : 클래스명. 변수명    => 다른 클래스                               
 *     {									new 없이 저장이 가능
 *        [접근지정어] static 데이터형 변수명;
 *        클래스 블록 안에서만 선언이 가능
 *     }
 *     *** 모든 클래스가 공유할 수 있다 (공개) => 메모리 공간이 1개만 생성
 *     자바에 사용하는 메모리
 *     ----------------
 *     Method Area => 메소드, static 변수
 *     ----------------
 *     Stack ==> 지역변수, 매개변수 => 메모리 자체 관리 => 메소드가 종료되면 자동으로 사라진다
 *               ------------- 메소드 안에서 사용이 가능
 *     ----------------
 *     Heap ==> 배열, 클래스 맴버변수 => 프로그래머가 관리
 *     ----------------
 *     1. int malloc(sizeof(A)), 2. free(A)
 *         메모리 할당                  메모리 해제
 *      ==> new
 *        
 *     ----------------------------------------------------------------------------------------------------
 *     지역 변수                   메소드 호출시마다 메모리 생성        메소드 안에서만 사용                        Stack 에 저장
 *     void display()                                                사용메서드가 종료                       
 *     {                                                              (return)                                         
 *        데이터형 변수명;
 *        => 메소드안에 선언
 *        => 접근지정어를 사용할 수 없다
 *        => static 사용할 수 없다
 *        => 유일하게 사용이 가능한것 
 *           -> final
 *        => 다른 클래스에서 사용이 불가능
 *           -> 메소드 블록에서만 사용
 *     }
 *     ***** 멤버변수(static, 인스턴스 변수 = (객체변수))
 *      => 자동초기화
 *      -> 지역변수는 자동 초기화가 안됨 (초기화 하고 사용)
 *         int a=>0
 *         double =>0.0
 *         String(클래스)=>null
 *                       ----- 실제 저장된 데이터의 주소가 없는경우
 *     ----------------------------------------------------------------------------------------------------
 *     * 변수
 *       저장하는 데이터가 여러개 => 따로 메모리를 저장하는 변수 (인스턴스)
 *       
 * 
 */
public class MainClass {
	public static void main(String[] args) {
		System.out.println("================ 영화 목록 =============");
//		메모리에 저장이 된 상태
//		static을 이용하면 메모리 공간이 1개 생성 => 모든 클래스에 공유가 가능
//		변경 => 모든 클래스 변경된 데이터를 사용
		for(Movie movie:MovieManager.movies) { //movies (public) 접근이 가능
			System.out.println(movie.getMno()+"."+movie.getTitle());
//			값을 출력 / 값을 읽는 경우 : get 변수 ()
//			값을 저장 / 값을 변경 : set 변수 ()
		}
	}
}
