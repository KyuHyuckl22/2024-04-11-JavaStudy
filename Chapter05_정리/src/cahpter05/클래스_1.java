package cahpter05;
/*
 *   변수 : 한개 저장 메모리 공간
 *     = 데이터형 
 *       정수 : int, long, 배열(byte) => 네트워크전송, 파일읽기
 *       실수 : double
 *       논리 : boolean
 *       문자열 : String
 *       => 사용자 정의 클래스
 *       ------------------ 데이터들을 조합
 *     = 배열 => 같은 데이터형의 변수 여러개를 한번에 저장 (이름이 한개) => 인덱스[0..]
 *              같은 데이터형만 모아서 관리 / 저장 갯수를 지정 (고정)
 *     = 클래스 => 다른 데이터형을 저장할 수 있다
 *               저장 갯수를 지정하지 않는다
 *               => 필요한 갯수만큼 new를 사용한다
 *               => 한개에 대한 정보
 *                  --- 한개를 묶은다음 new 를 이용해서 메모리에 저장하는것이 class
 *                  영화 정보 / 뮤직 정보 ...
 *     --------------------------------------------------------------------
 *     연산처리 / 제어문 
 *      이 두가지를 묶어서 메소드를 만들어서 기능처리를 한다
 *      프로그램은 묶음 그 다음 다시 활용 (재사용)
 *        => 변수 : 배열 / 클래스
 *        => 연산 / 제어문 => 명령문 => 메소드
 *        => 변수 => 초기화 (생성자)
 *        
 *  클래스 구성요소
 *    1. 변수 (멤버변수)
 *       ------------ 변수를 잡아놓고 어떻게 활용할것인지
 *    2. 메소드 => 변수에 대한 활용
 *    3. 생성자 => 변수에 초기화
 *    -----------------------
 *    
 *    클래스는 한가지 기능이 있다 => 프로그램에서는 여러가지 기능이 필요하다
 *      클래스 여러개를 만든다 => 클래스들을 연결시켜줘야 한다 
 *                                 --- 어떤클래스는 들어갈수 있게 어떤 클래스는 못들어가게 접근에 범위를 지정해야 한다 (접근 지정어)
 *                                 
 *    재사용 기법
 *    --------
 *      = 상속 (변경해서 사용)
 *        class A
 *        class B extends A => is-a
 *                ------- 상속 클래스
 *      = 포함 (있는 그대로 )         
 *        class C
 *        {
 *          A a=new A(); => has-a                   
 *        }
 *      = 필요시에는 변경 / 새로운 기능 추가 => 유지보수
 *        오버라이딩       오버로딩
 *   --------------------------------------------------
 *   
 *   객체지향의 3대 특성
 *     1. 캡슐화 : 데이터 보호
 *     2. 상속/포함 : 재사용
 *     3. 다형성 : 오버라이딩 / 오버로딩
 *               -------   -----> 새로운 기능
 *               |                new
 *               |수정 
 *                modify
 *     4. 추상화 : 사물을 단순화  => 클래스의 기본
 *        사원
 *          = 사번, 이름, 부서
 *        학생
 *          = 학번, 이름, 학교            
 *        계산기
 *          = 정수/정수, 연산자
 *            ------- 문자열
 *     ----------------------------------------------- 클래스의 종류 
 *       일반 클래스
 *       추상클래스 / 인터페이스 : 미완성 => 개발자가 완성해서 사용
 *         => 설계
 *        Ex) 오너요청 => 게시판을 만들어라 vs 계시판을 만드는데       어떤게 더 편한가?
 *                                     글쓰기
 *                                     상세보기
 *                                     찾기 / 추가
 *                                     수정 / 삭제        
 *                                     를 만들어라         
 *       ------------------------------------------------
 *      메소드가 미구현 : 프로그램에 맞게 구현해서 사용
 *        => 버튼클릭
 *        
 *     ---------------------------------------------  프로그램의 안전성 => 종료하지 않는 프로그램 => 예외처리 8장
 *     라이브러리 => 조립 => 암기
 *     Math => random() ceil()
 *     => Class 에서 3~4개정도씩만 외우면 됨
 *     
 *                          ____>생성자, 초기화블록 => 동시에 사용하지 않는다
 *     세부적                |
 *       클래스 : 변수, 메소드, 생성자, 접근지정어 ----> private / public
 *              --   ---                      변수 => private
 *               |    |---인스턴스 메소드  		  나머지 => public
 *               |        static메소드
 *               |        선언만 하는 메소드
 *              인스턴스 변수
 *              static 변수
 *              지역변수
 *     -------------------------------------------------
 *     클래스의 구성요소 : 무조건 다 사용하는 것은 아니다
 *     ------------  필요한 것만 사용한다
 *     
 *     ** 순서는 상관 없다
 *        권장사항
 *          => 변수
 *          => 생성자 
 *          => 메소드
 *     class ClassName
 *     {
 *        --------- 변수 선언 ----------
 *        [접근지정어][옵션] 데이터형 변수명 => 노출 방지
 *          - 접근지정어 : private
 *          - 옵션 : static : 공통적인
 *                  final : 마지막 (상수)
 *                  abstract : 추상적인, 구현이 안된.. (메소드에서 사용)
 *                  synchronized : 동기적인 (메소드에서 사용)
 *          - 인스턴스 변수 => 여러개를 동시에 저장할때 => new를 이용해서 생성 (new를 이용하면 메모리 공간이 따로 생긴다)
 *          				영화정보 / 음악정보 ...
 *          - 정적변수(static) => 공통으로 사용되는 변수 => Method Area => 메모리 공간을 한개만 사용
 *                             전체 데이터 목록
 *        ******* 대부분은 인스턴스 변수를 사용한다
 *        *** 사용할 수 있는 변수 
 *          = 기본형
 *          = 배열
 *          = 클래스
 *        *** 클래스 안에서는 변수가 없는 경우도 있다(필요한 경우에만 사용)
 *        *** 변수는 저장할때 반드시 값을 필요료 한다
 *        클래스 영역에 설정되는 변수는 자동 초기값
 *        
 *        => 프로그램에 때라서 다른 초기값이 필요할 수도 있다
 *        => int a=10; -> 명시적인 초기화 (직접 값을 넣어줌)
 *        => int a=난수발생 , 파일읽기, 사용자의 입력값
 *                 --------------------------
 *                 클래스 블록에서는 사용이 불가능 (선언만 가능 => 구현이 불가능)
 *        --------- 생성자 선언 ---------
 *          명시적인 초기화가 안되는 경우 -> 구현해서 값을 가지고 오는 경우
 *          
 *          => 맴버변수의 초기화
 *          => 시작과 동시에 처리하는 명령문이 있을때
 *             화면 UI / 자동 로그인 / 서버에 연결 / 서버 가동 / 데이터베이스 연결
 *          => 없는 경우에는 갱략할 수 있다 : 프로그램 구동시에는 반드시 생성자가 필요하다
 *                                    -------------------------------
 *                                      => 컴파일러에 의해 자동 추가 (디폴트 생성자)
 *                                                             --------- 매개변수가 없는 생성자
 *          => 특징
 *            = 클래스명과 동일
 *            = 리턴형이 없다
 *            = 객체 생성시에 호출 => new를 동반한다
 *            = 여러개 생성자를 만들 수 있다
 *              --------
 *                같은 이름의 메소드를 제작 => 오버로딩 : 중복 함수 정의
 *                구분 : 매개변수로 구분
 *                     -------------=> 1. 갯수가 다르다
 *                class A              2. 데이터형이 다르다
 *                {                    ----------------> JVM이 알아서 찾아준다
 *                  A(){}                 해당 매개변수가 없는 경우 => 가장 가까운 매개변수를 찾아준다
 *                  A(){}
 *                  A(){}
 *                }
 *                new A(); --> 어떤걸 호출했는지 알 수 없음
 *                
 *                class A
 *                {
 *                  public void display(){}
 *                }
 *                
 *                A a=new A()
 *                a.display()
 *                -----------
 *                
 *                new A ().display()
 *        ** 생성자는 다른 클래스에 연결시에 사용한다 => public 을 사용해야한다
 *        ** 객체자향 이란 프로그램은 class 한개로 제작되는게 아니다
 *           class 여러개를 만들어서 연결할때 쓰는 것이다
 *                   
 *        --------- 메소드 선언 ---------
 *          = 인스턴스 메소드
 *          public 리턴형 메소드명 (매개변수목록) => 객체명.메소드명
 *          {
 *          }
 *          
 *          = 정적 메소드
 *          public static 리턴형 메소드명 (매개변수목록) 클래스명.메소드명
 *          {
 *          }
 *          
 *          = 추상 메소드
 *          public 리턴형 메소드명(매개변수 목록); => 호출이 불가능 => 구현후에 사용
 *          
 *          = 기능 구현
 *            => 입력값
 *            => 요청처리
 *            => 결과값 출력
 *            => 게시판
 *              = 글쓰기 
 *              = 수정하기
 *              = 목록출력
 *              = 상세보기
 *              = 삭제하기
 *              = 검색하기      이렇게 만들어둔다면
 *              ------------------
 *                => 답하기     이런 기능들을 추가할 수 있다 
 *                => 댓글        (유지/보수)          ____
 *             이렇게 재사용 하기 위해서는 게시판을 상속받은 후 |확장|할 수 있다
 *                                                 ---> extends
 *        ----------------------------
 *     }
 *     
 *     접근지정어
 *     --------> private / public
 *              |맴버변수    | 생성자, 클래스, 메소드 => 공개 ...
 *              
 *              
 *              
 */

public class 클래스_1 {

}
