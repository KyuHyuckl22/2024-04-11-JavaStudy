package com.sist.main;
/*
 * 206p / 207p
 *           상속에서 접근지정어
 *  오버로딩 / 오버라이딩 ** 면접 97%, 7장(추상클래스 / 인터페이스) => 85%           앞에서 틀리면 뒤는없다
 *             | 라이브러리                        |Spring 기반       
 *  --------------------------------------------------------------------------------------------------
 *   오버로딩 : 중복 메소드 정의 (기능들이 거의 비슷해야함)
 *   
 *   
 *     Ex) print(int) print(char) print(char[]) ..
 *         
 *         => 사칙연산
 *              plus(byte, byte)    	매개변수가 다르면 다른 메서드로 인식하기때문에
 *                   byte, int           plus int 
 *                   byte, short         plus byte...  가 아니라
 *                   byte long           plus 하나로 모두 연산이 가능하다
 *                   byte float
 *                   byte char
 *                   byte double
 *                   7
 *                   short
 *                   7
 *                   int
 *                   7
 *                   char
 *                   7                       
 *                   
 *     => 버스
 *        버스 => 일반버스
 *        버스 (좌석)
 *        버스 (마을)
 *        버스 (고속)
 *  --------------------------------------------------------------------------------------------------
 *  오버라이딩 : 기존의 클래스를 상속받아서 재정의 (메소드의 기능을 변경)
 *           ---------------     ----
 *  --------------------------------------------------------------------------------------------------
 *            오버로딩                                             오버로딩
 *  --------------------------------------------------------------------------------------------------
 *  상태      같은 클래스 내에서
 *         class A
 *         {  // 매개변수의 명칭이 달라도 데이터형이 같으면
 *            // 같은 메소드 이다
 *           public void aaa(){}
 *           public void aaa(inta){}
 *           public void aaa(char c){}
 *           public void aaa(int a,int b)
 *           void aaa(float f){}
 *         }
 *  --------------------------------------------------------------------------------------------------
 *  메소드명      동일                                                동일
 *  --------------------------------------------------------------------------------------------------
 *  매개변수      갯수, 데이터형이 다르다                                  동일
 *  --------------------------------------------------------------------------------------------------
 *  리턴형        관계없다                                             동일
 *  --------------------------------------------------------------------------------------------------
 *  접근지정어     관계없다                                             확대만 가능
 *                                                    [접근지정어 크기]
 *                                                      private < default < protected < public
 *                                                                                      ------- 기본 public
 *  --------------------------------------------------------------------------------------------------
 *                                              
 *   오버라이딩 => 상속
 *                예외조건)
 *                  static : 상속은 안된다 => 사용이 가능하게 만들 뿐 (static은 자신의 것이 없다)
 *                  private
 *                   
 *   메소드의 종류
 *     1. 인스턴스 메소드 : new에 의해서 따로 저장
 *     2. 공통 메소드 : static => 상속의 예외조건 => 변경 (전체 변경) => 오버라이딩이 안된다
 *     3. 종단 메소드 : final 확장이 불가능 => 변경이 불가능 
 *     ---------------------------------------------------------------------
 *       권장) 메소드의 접근지정어는 가급적이면 public
 *       ---------------------------------
 *         접근지정어
 *         ------- 자주쓰는 두가지
 *         public  : 생성자, 클래스, 메소드, 인터페이스
 *                => 다른 클래스와 연결
 *         private : 멤버변수 => 데이터 노출 방지 (데이터 보호)
 *                => 다른 클래스에서 사용
 *                  => 변수 기능의 메소드 제작
 *                     ----------------
 *                     메모리 저장 / 메모리에 읽어오기
 *                    --------    -----------
 *                    set변수명()   get변수명()
 *
 *
 *        class 영역
 *        -------------------
 *        static 메소드 : 기본은 static 메소드, static 변수만 사용이 가능
 *          => 인스턴스
 *          
 *          
 */
class ABC
{
	public void display1() {}  //멤버 메소드
	public static void display2() {}  // 공동메소드
	public final void display3() {}  // 종단 메소드
}
class BCD extends ABC {
	public void display1() {}  //멤버 메소드
//	public static void display2() {}  // 공동메소드  ==> (공용) 자신의 것이 아니라 변경이 불가능 
//	public final void display3() {}  // 종단 메소드  ==> final이 붙으면 변경할 수 없어서 오류가 붙음
}
//  인스턴스 메소드, 인서튼스변수 => 중심, static은 데이터베이스 => MyBatis 때 자주 사용
// => 실무 : SpringFramework + MyBatis => MySQL
class DHB {
//	this.  은  DHB가 가지고 있는 변수
//	생성자, 멤버 메소드에게만 존재 => static 메소드는 this 가 없다. => 멤버변수를 사용할 수 없다
	private String name;
	private boolean login;
	private static int age;
	
	public static void aaa() {
		System.out.println(age); // static 은 static 만 가져올 수 있다.
	}
	
	public void display() {
		String name="";
		this.name="홍길동";
		name="";
	}
	

//		static 변수는 class의 멤버변수가 아니다 => 공통 사용부분을 구사
	
	
	public String getName() {
		return name;
	}
//	변수가 충돌이 안되면 this. 을 생략할 수 있다
	public void setName(String n) {
		name = n;
//		지역변수를 우선순위로 찾음
//		지역변수나 매개변수, 없다면 멤버변수를 찾아감
	}
	public boolean isLogin() {
		return login;
	}
	public void setLogin(boolean login) {
		this.login = login;
	}
}
public class MainClass_10 {

	public static void main(String[] args) {

	}

}
