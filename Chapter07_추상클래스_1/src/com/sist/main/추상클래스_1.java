package com.sist.main;
/*
 *   = 클래스의 종류
 *     1) 추상클래스 
 *       형식)
 *         public abstract class ClassName
 *                -------- 추상적인 (공통적인)
 *                {
 *                }
 *                공통으로 사용되는 메소드를 선언 
 *                => 자신의 클래스를 메모리 할당을 할 수 없다 => new 를 사용할 수 없다
 *                              -------------------
 *                              미완성 클래스기 때문
 *                => 상속을 받아서 => 오버라이딩을 하고 사용한다
 *                => 요구사항 (기능 설정) => 선언만 가능하게 만듬
 *                => 기능은 같은데 구현하는 내용이 다른경우 추상클래스를 주로 사용
 *                  ex) 버튼을 클릭 => 클릭한다 기능은 같다
 *                      버튼 => 기능 (로그인 버튼, 로그아웃 버튼, 계산기 버튼, 회원가입..)
 *                      => 프로그램에 맞게 구현해서 사용 ..
 *                  ex) 데이터베이스 연결
 *                      ------------
 *                      DriverManager
 *                      Oracle / MsSQL / MySql / Sqlite / MariaDB / DB2 ...
 *                      연결시에 따로 클래스를 만들면 => 한개로 통합
 *                                              ---------- 이때 주로 쓰는게 추상클래스
 *                => 같은 기능끼리의 클래스를 모아서 한개의 클래스 이름으로 관리할때 주로 사용
 *                   ------------------------------------------
 *                   데이터를 모을때 -> 배열
 *                   클래스를 모을때 -> 추상클래스, 인터페이스
 *                     -> 서로 다른 클래스를 연결할때 주로 사용
 *                     -> 클래스마다의 공통 기능을 추출 => 선언한 상태에서 필요시마다 상속을 받아서 구현
 *                => 이미 기능이 선어 => 요구사항 (기능), 문제
 *                => 무조건 상속을 받는다 / 단일상속
 *                                   ------- 을 다중상속이 될 수 있게 보완 ==> 인터페이스 
 *                => 멤버변수, 생성자도 가지고 있다
 *                => 1. 구현이 된 메소드  => 일반 메소드
 *                   2. 구현이 안된 메소드가0개 이상이 있다 => 추상 메소드
 *                   
 *                   ex)
 *                     일반 게시판
 *                     --------
 *                       목록 출력
 *                       상세보기
 *                       글쓰기
 *                       수정하기
 *                       삭제하기
 *                       
 *                     답변형 게시판
 *                     ---------
 *                       목록 출력 => 답변을 추가
 *                       상세보기
 *                       글쓰기
 *                       수정하기 
 *                       삭제하기 => 답변을 먼저 삭제하고 나중에 게시물 삭제
 *                       답변하기
 *                       
 *                     갤러리 게시판
 *                     ---------
 *                       목록 출력 => 이미지 출력
 *                       상세보기
 *                       글쓰기 => 이미지 업로드
 *                       수정하기
 *                       삭제하기
 *                       갤러리
 *                       
 *                     자료실
 *                     ----
 *                       목록 출력
 *                       상세보기  =>다운로드
 *                       글쓰기  => 업로드
 *                       수정하기 => 파일수정
 *                       삭제하기 => 파일삭제
 *                       자료실
 *                       
 *                     댓글형 게시판
 *                     ---------
 *                       목록 출력 => 댓글갯수 확인
 *                       상세보기 => 댓글 추가
 *                       글쓰기
 *                       수정하기
 *                       삭제하기
 *                       댓글기능 
 *                       
 *                   => 마우스 / 키보드
 *                      -------------> 업체들이 많다
 *                                     ---------- 운영체제에 맞는것 => 추상클래스
 *            
 *                => [접근지정어] abstract class ClassName
 *                {
 *                  -----------------------------------
 *                   멤버변수
 *                  -----------------------------------
 *                   생성자 => 생략 => 자동으로 디폴트 생성자가 추가
 *                  -----------------------------------
 *                   메소드 => 구현이 된 메소드
 *                   [접근지정어] 리턴형 메소드(매개변수..)
 *                   {
 *                     return 값; => void 인 경우에는 생략
 *                   }
 *                  -----------------------------------
 *                   추상메소드 => 구현이 안된 메소드
 *                   [접근지정어] abstract 리턴형 메소드명(매개변수...);
 *                     => 데이터베이스
 *                      ----------- 오라클 연덩 / MySql 연동 => 같은 메소드를 구현
 *                    ** 웹 => 데이터베이스 연동  ************ 핵심
 *                    
 *                            J2EE=> 웹 연결 (브라우저)
 *                            ----------------------- 기본 문법이 지금 배우는 과정
 *                  -----------------------------------
 *                  => 유지 보수가 어려운 경우 => 기능설정 => 필요시마다구현
 *                  => 경우의 수가 많은 경우
 *                     ---- 기능
 *                  
 *                  
 *                }
 *     2) 인터페이스
 *     3) 내부클래스 => Thread ==> 네트워크와 관련되어 있음
 *                => 클래스 안에 클래스 설정 
 *                -> 보통 멤버변수, 멤버메소드 를 쉽게 사용할 수 있게 만드는것이 내부클래스
 *                  형식)  
 *                    class A
 *                    { 
 *                      (변수, 메소드)
 *                      class B
 *                      {
 *                        A 객체를 생성하지 않아도
 *                        A가 가지고 있는 변수, 메소드 사용이 가능
 *                      }
 *                    }
 *                    
 *                    class A
 *                    {
 *                      => (익명의 클래스) 라고 불리고 상속없이 오버라이딩이 가능 -> 주로 윈도우 프로그램에서 주로 사용
 *                      B b=new B()
 *                      {
 *                        public void display()
 *                        {
 *                        }
 *                      }
 *                    }
 *                    class B
 *                    {
 *                      public void display(){}
 *                    }
 *                    
 *                    *** 상속이 있어야만 오버라이딩이 가능한것은 아니고 익명의 클래스를 사용해서 오버라이딩이 가능하다
 *                        스프링에서는 상속을 권장하지 않는다
 *                                 ----------------> 상속은 제약이 존재하기 때문에
 *                                                    "   메모리가 커진다 (상위클래스 메모리 할당을 한 후 하위 클래스 메모리 할당을 하기때문)
 *                                                    "   처리 속도가 늦다
 *                                                    "   재사용을 한다 (상위 클래스의 소스코드를 모르는 상태에서 재정의 하기때문에 
 *                                                                   가독성이 떨어진다)
 *     4) 종단클래스 (사용빈도가 적음) -> 라이브러리에 존재 => 확장을 할 수 없는 클래스(고정)
 *                java.lang =>(유명한것들) String, System, Math, Wrapper ... => 상속을 받을 수 없다
 *                => public final class String
 *                          -----> final이 붙어있으면 상속을 할 수 없기때문에 오버라이딩이 불가능하다 ==> 종단클래스
 */
abstract class 도형{
//	 그리다 => 선, 원, 삼각, 사각 ...
	public abstract void draw(); //  매소드가 구현이 안되면 미완성된 클래스라 부르고
	                             // 미완성 클래스는 메모리에 저장이 불가능하다
// => 상속을 받아서 구현 후 사용
// => 여러개의 관련된 
}

class 선 extends 도형 {
//	오버라이딩을 해줘야 함
/* 
 *   오버라이딩 => 재정의
 *   ------- 
 *   1. 메소드명이 동일
 *   2. 매개변수가 동일
 *   3. 리턴형 동일
 *   4. 접근지정어는 확장이가능
 *      ------
 *      private : 데이터보호 목적 => 변수
 *      public : 클래스, 메소드,생성자 => 다른 클래스와 연결
 *      => 접근 범위를 늘리는 경우
 *      private < default < protected < public
 *   5. 추상클래스는 반드시 상속을 내려서 선언된 메소드를 구현한 후 사용이 가능
 *      ------- 자신이 메모리 할당이 불가능
 *       
 *         동물 .....걸어다닌다, 먹는다, 말을한다,
 *          |
 *       --------
 *       |  |  |
 *      개  돼지 인간 .... 일반 클래스 부분
 */
	@Override
	public void draw() {
		System.out.println("선을 그린다");
	}
//	 추상클래스나 인터페이스 상속이 있는 경우에는 반드시 구현이 안된 메소드를 구현 하 사용
}
class 사각형 extends 도형 {

	@Override
	public void draw() {
		System.out.println("사각형을 그린다");
	}
	
}
public class 추상클래스_1 {

	public static void main(String[] args) {
//		선 a=new 선();
//		a.draw();
//		사각형 b=new 사각형();
//		b.draw();
		
		도형 a=new 선();
		a.draw();
		
		a=new 사각형();
		a.draw();
//		같은 종류의 클래스를 모아서 한개의 객체명으로 연결, 사용
	}

}
