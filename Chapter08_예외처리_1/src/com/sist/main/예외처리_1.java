package com.sist.main;
/*
 *   8장 => 263p (8장은 암기다!)
 *     => 예외처리
 *       = 최적화 : 실행속도
 *       = 가독성 : 보기 편하게(쉽게) 만들어주기
 *       = 견고성 : 프로그램이 중단이 되지 않게 만들기
 *        ---------- 예외처리 = 에러를 사전에 방지해서 비정상 종료를 방지하는 프로그램
 *     => 자바
 *       에러 == 수정이 불가능한 에러 (메모리가 부족, 쓰레드 충돌)
 *       예외처리 => 소스상에서 수정이 가능한 에러 (파일명 오류, URL주소 오류...)
 *       에러가 발생하는 요소
 *         1) 사용자의 입력 부주의 : 잘못된 입력이 있는 경우
 *            -------------- if(조건문 처리) => 유효성 검사 
 *         2) 프로그래머의 실수 : 배열의 범위 초과, 반복수행, 클래스 메모리 할당을 하지 않은경우
 *                           변수의 초기화가 없는 상태, 잘못된 입력 ...
 *     => 예외처리 하는 이유
 *       = 사전에 에러방지 
 *       = 비정상 종료를 방지하고 정상상태 유지
 *       = 예외처리 => 에러발생시 에러부분을 건너뛴다
 *         ------------------------------- 에러를 수정해 주는 것은 아니다
 *     => 예외처리 방법
 *       = 예외 복구 : try ~ catch
 *                  ---   ------> 에러발생시 처리 => 복구
 *                정상수행할수있는 문장
 *       = 예외 회피 : 예외발생시 처리하지 않고 시스템에 의해 처리
 *                  메소드 뒤에 첨부
 *                  메소드() throws 예외처리
 *       ---------------------------------- 복구와 회피는 확실하게 알아야 한다.
 *       = 임의 발생 : 테스트용으로 주로 사용 -> 프로그램이 정상작동을 하는지 확인을 할때 사용
 *                  throw => 에러를 발생시켜서 이 프로그램이 견고한 프로그램인지 확인
 *       = 사용자 정의 : 자바에서 지원하지 안흔ㄴ 예외처리가 존재 -> 필요시 직접 예외처리를 만들어서 사용
 *     
 *     => 예외처리의 상속도 => 처리하는 순서가 존재  
 *                       Object
 *                         |
 *                      Throwable : 에러처리 최상위 클래스
 *                    _____|________________________
 *                    |                             |
 *                  Error                       Exception
 *                  => 처리가 불가능                => 처리가 가능 (소스상)  - ex) 0으로 나누는 경우, 파일이 틀린경우
 *                  => 종료후에 다시 시작                                      URL주소가 틀린경우, IP가 틀린경우
 *                                     처리가 가능한 에러 => 예외처리
 *                                           Exception
 *                                      ________|________________
 *                                     |                         |
 *                               (CheckedException)          (UnCheckedException)
 *                               => 컴파일시에 예외처리를 확인         => 컴파일시에 예외를 확인하지 않는다
 *                               => 반드시 예외처리를 한 후에 사용      => 필요시에 예외처리를 한다
 *                               => 예외처리가 필요한 경우            => 예외처리가 필요한 경우
 *                              ** -> java.io : 파일입출력           -> 사용자 입력을 받는 경우
 *                              ** -> java.spl : 오라클 연결시     => 실행시 에러
 *                                 -> java.lang : 쓰레드 관련된것      -> java     
 *                              ** -> java.net : 네트워크 관련
 *                              ** -> 웹(네트워크) 반드시 예외처리          
 *                                 -> 오픈 API : Jsoup
 *                                 -> javac
 *                               => 9장 라이브러리 => 자바에서 지원하는 클래스의 집합
 *                                 -> java.lang, java.utill, java.io
 *                                 -> java.net, java.spl
 *                              ------------------------------------------- 위 다섯가지는 꼭 기억하기
 *                                 -> javax.http.servlet. => 웹 관련 => JSP
 *                                                
 *       => Front : 자바 스크립트 중심 (JavaScript => Jpuery, Ajax, NodeJS, VueJs, ReactJS)
 *                                -----------                          ---------------\
 *                                |TypeScript                          | NextJS
 *                                   ________________________________
 *       => Back : 프로그램 언어 (자바) => JSP, MVC, Spring, Spring-Boot  |
 *                                   데이터베이스 (오라클, MySpl, mariadb) |
 *                                   ----------------------------------- 목표
 *            |  AI => 파이썬, 머신러닝, 딥러닝
 *                    ----- 데이터 분석 프로그램 짤때 쓰는 프로그램 ==> 넘파이 / 판다스 / MatplotLib (시각화) => seabon
 *       
 *       CheckedExeption
 *       ---------------- 반드시 예외처리를 해서 사용해야한다 (컴파일시에 예외처리가 되어 있는지 확인)
 *              |
 *        FileNotException : 파일을 찾을수 없을때
 *        IOException : 입출력이 잘못 되었을때
 *        SQLException : 오라클 연동 오류가 있을때
 *        URLMalformedException : 네트워크 오류가 있을때
 *        ClassNotFoundException : 클래스를 못 찾았을때
 *          - Class.forName() => 클래스명으로 메모리 할당
 *        InTerrupedException : 
 *          - Thread.sleep() => 충돌방지
 *            => 쓰레드는 프로그램안에서 여러개의 프로그램을 동시에 실행
 *       
 *       UnCheckException : 필요시에만 예외처리를 한다 => 예외처리를 생략할 수 있다         
 *       ----------------
 *              |
 *         ArrayIndexOutOfBoundsException => 배열볌위 초가시
 *         ClassCastException => 클래스 형변환
 *         ArithmeticException => 산술오류 => 0으로 나누는 경우 (주로 사용자입력)
 *         NullPointerException => 메모리 할당이 없는 상태에서 객체를 사용시
 *         -------------------> String, 윈도우 관련
 *                              ----- 멤버변수 선언시 => 자동 초기화 => null, 크롤링 => 데이터가 없는경우
 *                                     
 *     => 예외처리의 상속도 => 처리하는 순서가 존재  
 *                       Object : 최상위 클래스
 *                         |
 *                      Throwable : 에러처리 최상위 클래스
 *                    _____|________________________
 *                    |                             |
 *                  Error                       Exception
 *                                      ____________|_____________________
 *                                     |                                  |
 *                                 IOExcetion                  RuntimeException : 실행시 에러 => 필요시에는 예외처리 한다
 *                                 SQLExcetion                         |
 *                                 =>반드시 예외처리(필수)           ArrayIndexOutOfBoundsException
 *                                                             ClassCastException
 *   
 *     *** 프로그램 제작 
 *       1. 설계 => 벤치마킹 (웹, 게임, ...) => 모방 => 새로운 내용을 만든다
 *         -> 영화 (영화가 종료 => 어디를갈까? )
 *         -> 캠핑장 -> 레시피
 *         -> 자격증 -> 교재추천
 *         -> 어렵게 작동 -> 단순화
 *        
 *       2. 변수설정 => 초기화 필요 여부
 *         => 생성자  (인스턴스)
 *         => static => static 블록을 이용한다
 *         => 사이트의 화면에 출력된 데이터를 확인 => 필요시 데이터 설계
 *       3. 기능설정 => 메소드
 *          --------------
 *          = 예상되는 에러를 추출 -> 예외처리를 한다 -> 프로그램의 종료 방지
 *      *** 실무의 예외처리 => 한개 (상위 클래스를 이용하는 경우가 많다)
 *          상속도를 보는 이유 => 상속을 내리는 클래스는 하위 클래스의 예외를 포함하고 있다 => 한번에 처리가 가능하다
 *                               
 *          ex) 
 *            배열을 선언                                    배열을 선언  => ArryIndexOutOfBoundsException - 배열초과
 *            정수를 입력 받아서                               정수를 입력받아서 => NumberFormatException - 정수가 아닌수 입력
 *            나누기한다          라고 한다면, 발생할수 있는 예외 =   나누기한다 => ArithmeticException - 0으로 나누기
 *                  
 *            try {
 *                배열을 선언
 *                정수를 입력
 *                나누기
 *                ====> 평상시에 코딩 => 실행가능한 프로그램을 서술   
 *            }catch(ArryIndexOutOfBoundsException) {    => 다중조건
 *            }catch(NumberFormatException) {
 *            }catch(ArithmeticException) {
 *            }
 *            ... catch는 여러개가 올 수 있다  
 *            ------------------------------------ 위 처럼 낱개 여러개를 쓸것이냐 -----------------------------------
 *            try {
 *                배열을 선언
 *                정수를 입력
 *                나누기
 *                ====> 평상시에 코딩 => 실행가능한 프로그램을 서술   
 *            }catch(RuntimeException) {    => 위 세가지 오류의 상위버젼이라 한개로 위의 세가지 오류를 한번에 잡을 수 있음
 *            }                               그래서 상속도를 외우는것이 좋음
 *            
 *            => 위로 올라갈수록 예외처리 기능을 많이 가지고 있다
 *         
 *       1. 예외처리의 형식 
 *         --------- 에러가 발생시에 건너뛰는 역할
 *                              ------ 에러를 처리해주는 것은 아니다 
 *         try {
 *             정상수행을 할 수 있는 소스
 *             ------ 평상시 코딩 --> 일부러 에러 발생을 시키지 않는다
 *             1) 에러가 없는 경우 -> try 에서 종료
 *             2) 에러가 있는 경우 -> 해당 에러를 등록한 catch 를 찾는다
 *         }catch(예외처리 클래스) {
 *             에러발생시에 복구하는 위치
 *         }
 *         소스 코딩을 수행
 *         
 *       ex)
 *         try{
 *           문장 1
 *           문장 2 
 *           문장 3
 *           문장 4
 *           문장 5 
 *         }catch(예외처리 클래스){
 *           문장 6 -> error 발생시 처리하는 부분 (에러가 없는 경우에는 catch 는 수행하지 않는다)
 *         }
 *         문장 7
 *         문장 8
 *         프로그램 종료
 *         
 *         => 오류가 없는 경우 => 1,2,3,4,5,7,8, 프로그램 종료
 *       ex)  
 *         try{
 *           문장 1
 *           문장 2 
 *           문장 3  => 에러 발생 => catch 로 이동  ----|  --> 예외처리를 하지 않는 경우에는 종료
 *           문장 4								  | 건너뛴다 	
 *           문장 5  	                          ----|
 *         }catch(예외처리 클래스){
 *           문장 6 -> error 발생시 처리하는 부분 (에러가 없는 경우에는 catch 는 수행하지 않는다)
 *         }
 *         문장 7
 *         문장 8
 *         프로그램 종료        
 *         
 *          1,2,6,7,8, 프로그램 종료
 *          
 *     try 절 : 정상수행이 가능한 소스 코딩을 하는 부분 => 모든 프로그램 소스가 서술
 *       => 1개만 설정
 *     catch 절 : try 수행중에 에러가 발생하는곳 처리 및 복구
 *       => 여러개 사용이 가능
 *       => 에러발생시 1개의 catch 만 수행 => 다중 조건문과 비슷하다
 *          ------------------------> 찾아서 처리하는 역할 => JVM
 *       => 소스 전체를 예외처리
 *         try {
 *           모든 소스
 *         } catch() {
 *         }
 *          
 *       => 예상되는 부분만 예외처리가 가능
 *         문장
 *         문장
 *         try {
 *           문장
 *         } catch(Exception) {
 *         }
 *       
 */
class A {
	
}
class B extends A {
	
}
public class 예외처리_1 {
	String name;  // => 모든 클래스는 null값으로 초기화
	public void display() {
		name = name.substring(0,1);
		System.out.println(name);
	}
	
	public static void main(String[] args) {
//		int [] arr=new int[2];
//		arr[0]=10;
//		arr[2]=20; // 에러발생 부분 => 인덱스 범위 초과 => 종료 => 비정상 종료 
//		           // Output 창을 확인해야함 그래야 어디서 에러발생 부분을 확인할 수 있음
//		System.out.println(arr[0]+","+arr[2]);
//		
//		A a=new A();
//		B b=(B)a;
		예외처리_1 a=new 예외처리_1();
		
	}

}
