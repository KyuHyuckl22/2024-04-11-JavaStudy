package com.sist.main;
/*
 *   예외처리
 *     = 정의: 사전에 에러를 방지하는 프로그램 => 견고성(에러가 나도 버틸 수 있는)
 *     = 목적: 비정상 종료를 방지하고 정상 상태를 유지하는 프로그램을 짜는것
 *     
 *   예외처리의 종류
 *  ** = 직접처리 => 예외 발생시 복구
 *         ↓               --- 복구하는 위치 = catch 블록
 *        try ~ catch ~ finally
 *        
 *  ** = 간접처리 => 예외 발생시 회피 --> 예외처리 없이 피해간다
 *         ↓
 *       throws -> 라이브러리에 많기 때문에 공부 필요 **
 *        
 *     = 임의 발생 => 에러가 없는데 임의로 발생 --> 주로 테스트 목적으로 쓰임
 *         ↓
 *       throw
 *       
 *     = 사용자 정의 => 자바에서 지원하지 않는 예외처리를 직접 만들어서 처리
 *         ↓
 *        Exception 을 상속받아서 처리한다 => 사용빈도는 거의 없다
 *        
 *   1. try ~ catch
 *       try {
 *           정상 수행하는 문장
 *           => 프로그램 수행중에 오류 발생 할 수 있따
 *               => 프로그래머의 실수, 사용자 입력 문제
 *                               --------------> 우선 조건문을 고민해 봐야 한다
 *       }catch(예외처리클래스) {
 *            -> try 수행중에 에러가 발생시 처리하는 영역
 *        } => catch는 여러개 사용이 가능 -> 예상되는 에러를 따로 설정 --> 한개로 처리가 가능 => 상속도 공부 필요
 *        finally {
 *            -> 정상수행을 하던가, 에러처리를 하는것에 상관 없이 무조건 수행하는 문장  => finally 는 생략이 가능하다
 *                  try        catch                      
 *        }
 */
public class 예외처리_정리 {

	public static void main(String[] args) {

	}

}
