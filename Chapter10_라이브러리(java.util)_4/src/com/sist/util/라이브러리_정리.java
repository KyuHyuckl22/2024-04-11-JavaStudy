package com.sist.util;
/*
 *     java.io
 *     -------
 *         특징 : 데이터 이동 통로를 만들어서 데이터 입출력을 한다
 *              ------------
 *                 Stream : 단점 (단방향이다) => 빨대프로그램 
 *                                          빨아들이기 : InputStream
 *                                          뱉기     : OutputStream
 *                                                (읽기 와 쓰기 를 따로 만들어서 처리해야함)
 *                                                네트워크는 읽기 / 쓰기 를 동시에 처리 이때 사용하는게 (쓰레드)
 *                                                ---------------------------------------------
 *                                                대표적 예) 채팅  서버에서 보내는 값 / 서버로 보내는 값 (동시에 해야함)
 *     IO 는 InputStream / OutputStream 의 약자
 *          송신 / 수신 => 1byte => 자바에서는 각국의 언어를 사용할 수 있게 2byte 를 사용할 수 있게 제작
 *          --------------------
 *          1byte => 바이트 스트림
 *                   ~ InputStream , ~ OutputStream
 *          2byte => 문자 스트림
 *                   ~ Reader , ~ Writer
 *     
 *          상속도
 *              InputStream       OutputStream
 *                  |                   |
 *             FileInputStream     FileOutputStream
 *          BufferedinputStream  BufferdeOutputStream
 *          
 *               Reader               Writer
 *                 |                    | 
 *             FileReader           FileWriter
 *           BufferedReader       BufferedWriter
 *           
 *         => ObjectInputStream / ObjectOutputStream
 *             객체 단위 저장 => 직렬화 / 역직렬화
 *       ---------------------------------------------------------------
 *         메모리 입출력 : Scanner
 *         파일 입출력 : IO
 *         네트워크 입출력 : IO
 *       ** IO 사용시 반드시 예외처리를 한다 (CheckedExeption)
 *       
 *           입출력 
 *               => 입력 메소드 : read() => 한 글자 읽기  read(), read(byte[])
 *               => 풀력 메소드 : write() => 한 글자 출력 write(byte[]) , write(int)
 *       --------------------------------------------------------------- 파일 닫기 : close()
 *           FileInputStream / FileOutputStream
 *       => 웹   :  파일 업로드  /  파일 다운로드  / 파일 복사
 *       
 *       ----------------------  문자 스트림  ------------------------------
 *       => 읽기 메소드 : read() , read(char[])
 *       => 쓰기 메소드 : write(char) , write(char[]) , write(String)
 *                                                  --------------- 많이 사용
 *                 FileReader / FileWriter
 *         사용처 => 크롤링 후 파일에 저장시 / 카페, 블로그 읽어서 저장하기 등..
 *       ----------------------------------------------------------------
 *       -----------------------  필터 스트림  -----------------------------
 *        파일에 있는 데이터를 메모리에 한번에 이동 후에 사용이 가능 => 속도가 빠르다 "Buffered~"
 *        => 읽기 메소드 : readLine() => 한 줄씩 읽어온다 
 *        => 쓰기 메소드 : write(String)
 *            BufferedReader   /   BufferedWriter
 *            => 한번에 데이터를 한 줄씩 읽는 경우에 주로 사용
 *            => 명사 / 조사 => 파일을 이용
 *               --------- 형태소 분석 : 꼬꼬마 (서울대에서 제작) => 라이브러리
 *       ----------------------------------------------------------------
 *       
 *       => FileReader => r (읽기모드)
 *       => FileWriter => w (쓰기모드), a (쓰기모드)
 *                       ----------  ----------
 *       기존의 데이터 덮어쓰기 <= create  |  append => 기존의 데이터 결합
 *       ------------------------------------------------------
 *                생성자 new FileWriter ("파일명",true) ==> a
 *                     new FileWriter ("파일명")      ==> c
 *       => 파일을 읽어서 => ArrayList 에 저장 후 데이터를 활용
 *                       ---------> 배열
 *                       
 *       => properties
 *         ----------- 파일의 확장자 : .properties
 *                     구분자가 있기 때문에 사용하기 편리하다 => 사용자 정의
 *                     외부 라이브러리에서 주로 사용 : 보안이 뛰어나다
 *                     -----------
 *                       | 데이터베이스 관련 (MyBatis, JPA, Spring)
 *                         *** 필수적으로 사용 : 스프링 부트 (환경 설정)
 *                                           | properties 파일 / yml 파일을 주로 이용 
 *       작성법
 *           변수 = 값
 *           ---  --  변수 : key 역할을 수행하기 때문에 중복을 허용하지 않는다
 *                     값 : 값은 중복 허용이 가능하다
 *           id = admin
 *           name = 홍길동
 *           ---------------------- Map 방식
 *           => 데이터베이스 정보 : 오라클 위치, 사용자명, 비밀번호
 *                            ------------------------ 누구나 데이터베이스에 접근이 가능
 *           => Validation : 유효성 검사
 *           ----------------------------------------- 
 *           => 라이브러리로 제작이 되어있음 등록만 하면 알아서 읽어준다~!
 *           
 *           => 컬렉션 + IO 
 *             -----   --  배열이 사라졌으니 
 *                         컬렉션을 사용하라!
 *              => 1. 데이터 수집 을 하게되면 파일에 저장 => List 로 저장 => 사용
 *                    (저장하지 않는다면) - 프로그램 구동시마다 데이터 수집을 계속 해야 한다 
 *                                   - 데이터 수집없이 파일만 읽는다
 *                 2. 데이터 수집시 중복되는 데이터들을 제거 => Set 을 이용
 *                 3. 관리하는 클래스가 많은 경우
 *                    -------------------
 *                      new 메모리 누수 현상 => 한개의 메모리만 사용이 가능하게 만든다 
 *                                         ---------------------------- 싱글턴 이라고 함
 *                                                                       | Map
 *            => 컬렉션 
 *                Collection
 *            ________|______________
 *           |            |          |
 *         List          Set        Map
 *          |             |           |
 *       ArrayList       HashSet     HashMap
 *       데이터를 저장      중복 제거       클래스 관리
 *       
 *        add()           add()         put()
 *        size()          size()        isEmpty()
 *        get()           isEmpty()     size()
 *        isEmpty()       clear()       get()
 *                                      keyset()
 *                                      nalues()
 *                                      
 *       -----------------------------------------------------------------------
 *        나중에 나오게 될 라이브러리들
 *            1. network
 *            2. sql
 *            3. J2ee => 웹관련
 *            4. 외부 라이브러리 : Jsoup ... mvnrepository.com
 *            5. Spring
 *            6. python 연동
 *          
 */
public class 라이브러리_정리 {

	public static void main(String[] args) {

	}

}
