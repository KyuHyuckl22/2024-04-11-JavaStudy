/*   *객체지향 문제 참조*
 * 
 *   1. 답:3
 *       new를 사용하면 여러개를 생성할 수 있다 
 *       
 *   2. 답:4
 *       클래스의 구성요소 --> 다른클래스에서도 사용이 가능하다 => 객체지향 (여러개 클래스를 만들어서 조립 => 클래스 간의 연관관계)
 *       ------------------------
 *        1) 맴버변수 -> 필드 라고 부른다
 *        2) 생성자                  이 세가지는 접근지정어, 옵션(static, final, abstract) 을사용할 수 있다
 *        3) 메소드 -> 지역변수 라고 부른다 (접근지정어가 필요 없다)
 *       ------------------------
 *        4) 지역변수 -> 로컬변수 라고 부름   유일하게 사용할 수 있는 옵션 => final 만 사용이 가능하다
 *        
 *   3. 답:4    
 *       클래스의 종류
 *        = 데이터형 클래스 : 사용자 정의 데이터형 => 관련된 데이터를 한번에 모아서 전송 -> 웹에서 주로 사용
 *           => 변수만 설정
 *           class Student{
 *              String name;
 *              String subject;
 *              ..
 *              ..
 *           }
 *        = 액션 클래스 : 동작
 *           => 메소드만 설정
 *   -------------------------------- + 혼합        
 *      멤버변수 : 데이터를 저장할 목적
 *      메소드 : 멤버변수 활용 => 동작
 *      생성자 : 멤버변수의 초기화, 객체 생성시에 호출
 *      
 *   4. 답:3
 *      멤버변수
 *         => 초기화 (생성자)
 *         => 활용 => 메소드
 *         => 기본값을 가지고있다
 *            class A {   //기본값
 *               int a;  => 0
 *               double b;  =>0.0
 *               boolean c;  => false
 *               String d;  => null
 *            }
 *            
 *            class A {
 *            ------------------
 *               맴버변수(필드)
 *            ------------------
 *               생성자
 *            ------------------
 *               메소드 ---------> 권장사항 => 대부분의 개발자
 *            ------------------ 권장사항이기 때문에 순서가 바뀌어도 상관없다
 *            }
 *            
 *   5. 답:  
 *      생성자는 여러개 사용이 가능, 없는 경우도 존재(자동 컴파일러에 의해 추가된다)
 *                                    => 한개라도 조냊하면 추가하지 않는다
 *      class A
 *      {
 *      생성자 3개
 *         A(){}  ==> 매개변수가 없는 생성자만 추가 = 디폴트 생성자
 *         A(int a){}
 *         A(int a, int b){}  
 *      }
 *      
 *      class A { //생성자가 없을때
 *         => 자동 추가 => A(){}
 *      }
 *      
 *      tihis = 다른생성자를 호출하기 위한 메서드
 *      
 *   6. 답: 4
 *       메소드는 오버로딩 : 중복 메소드 정의
 *          1) 메소드명이 동일
 *          2) 매개변수의 갯수나 데이터형이 다르다
 *          3) 리턴형은 관계 없다
 *          4) 접근지정어도 관계 없다   
 *                                  저장시
 *       void disp()                ===>   disp()         == 3번 5번만 같은 거
 *       void disp(int a)    			   disp(int)         나머지는 다 다른 메소드다
 *       void disp(int a, int b)           disp(int,int)
 *       void disp(double d)               disp(double)
 *       void disp(int c, int d)           disp(int,int) 
 *       
 *   7. 답: 2  
 *       
 *   8. 답: 2
 *      static 과 관련된것은 static 변수, static 메서드만 가능하다
 *      인스턴스는 static 관련된것 불가
 *      인스턴스는 static 안에 객체를 생성 해야만 사용이 가능하다 => 클래스명 참조변수 = new객체명();
 *      
 *      class A
 *      {
 *         static int a=10;       --> 저장o
 *         int b=20;              --> 저장x
 *         static void disp(){}   --> 저장o
 *         void aaa(){}           --> 저장x
 *      }    
 *         A.a / A.disp()
 *         클래스명으로 접근이 가능 (변수, 메소드) => Math.random()
 *                                              ---------static 변수
 *         A aa=new A();  ==> 인스턴스 변수, 메소드가 저장이 된다
 *           --- b, aaa()
 *         aa.b , aa.aaa()                                     
 *      
 *   9. 답:          
 *      상수 => 상수 (static final)
 *             상수형 변수 (final)
 *   
 */
public class 객체지향문제_풀이및설명 {
	public static void main(String[] args) {
		
	}

}
