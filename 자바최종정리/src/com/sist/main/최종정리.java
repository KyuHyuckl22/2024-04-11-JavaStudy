package com.sist.main;

import java.lang.reflect.Method;
import java.util.Arrays;

/*
 *    프로그램
 *    ------
 *       1.   데이터 저정하는 곳 => 메모리 / 파일 / 데이터베이스(오라클)
 *                        |      ---------------------- Java에서는 제어가 불가능하다.
 *                        |=> Java에서는 파일 / 데이터베이스에서 읽은 데이터를 메모리에 저장 후에 관리 ==> 변수
 *          자바에서 사용하는 용어
 *          ----------------
 *          1) 변수 / 상수 => 한 개의 데이터를 저장하는 공간
 *             ---    --- 변경이 불가능 : final => final int a;
 *             |=> 변경 가능 (덮어쓰기 형식)
 *             => 저장 공간의 크기 (데이터형)
 *                ----------------------------------------------------------------------------
 *                정수
 *                   byte (1byte) => -128 ~ 127 ==> OverFlow
 *                      => 웹(파일 업로드 / 파일 다운로드), application (네트워크 전송)
 *                                 |                 |
 *                                 |            채팅 / 쪽지 보내기 => Socket
 *                              WebSocket
 *    
 *                   int   (4byte)   => 프로그램에서 사용하는 모든 정수는 int를 인식한다
 *                               -21억 4천 ~ 21억 4천
 *                   long (8byte)=> 금융권 / 공기업 / 빅데이터 / AI
 * 
 *                   =>   오라클에서 보내준 데이터를 받은 경우
 *                        ----
 *                      [NUMBER, NUMBER(4) => int]
 *                ----------------------------------------------------------------------------
 *                실수
 *                   double (8byte) => 일반적인 실수 저장할 때 사용하는 공간
 *                   [NUMBER(7, 2) => double]
 *                ----------------------------------------------------------------------------
 *                논리형
 *                   boolean (1byte) : true / false
 *                   [오라클에는 존재하지 않는다. (CHAR, NUMBER 사용하여 처리)]
 *                ----------------------------------------------------------------------------
 *                문자 / 문자열
 *                   String : 웹, 윈도우에서 => 가장 많이 사용하는 데이터 형
 *                   [VARCHAR2]
 *                      1) 오라클 컬럼과 매칭
 *                         EMPNO    NOT NULL NUMBER(4)       ===> int empno      (사번)
 *                        ENAME             VARCHAR2(10)    ===> String ename   (이름)
 *                        JOB               VARCHAR2(9)     ===> String job      (직위)
 *                        MGR               NUMBER(4)       ===> int mgr      (사수 번호)
 *                        HIREDATE          DATE            ===> Date hireDate   (입사일)
 *                        SAL               NUMBER(7,2)     ===> double sal      (급여)
 *                        COMM              NUMBER(7,2)     ===> double comn   (성과급)
 *                        DEPTNO            NUMBER(2)       ===> int deptno      (부서 번호)
 *                     =========================================================================
 *                        숫자형 (NUMBER => int, double)
 *                        
 *                        문자형 (CHAR / VARCHAR2 / CLOB => String)
 *                          1 ~ 2000자 / 1 ~ 4000자 / 4기가
 *                        *** 한글 한 글자당 3byte
 *
 *                        날짜형 (DATE => java.util.Date)
 *                       
 *                      2)   웹에 출력된 데이터 : 데이터 추출 (데이터형)
 *                      *** 변수 / 클래스 / 배열 => 남발하면 프로그램을 짜기 어렵다
 *                         => 한 개의 이름으로 제어 ==> 모음
 * 
 *          2) 데이터가 많은 경우에 데이터를 모아서 관리한다.
 *             =>   묶어서 사용 : 반복문 사용 ==> 소스가 간결해진다.
 *                int a ~ z  26개 변수 설정 => 가장 큰 값, 작은 값 출력;
 *                   => if문이 50개가 넘어간다.
 * 
 *             =>   같은 데이터 형을 묶어서 한 개의 이름으로 제어
 *                ----------        --------- 배열 (구분자 => Index) ==> 개수 지정
 *             =>   다른 데이터 형이 여러개 한 개의 이름으로 제어
 *                ----------        --------- 클래스 (구분자 => 메모리 주소 값 ==> 객체) ===> new 생성자() ====> 따로 저장이 된다.
 *                => 한 개의 이름으로 모아서 관리 : 인터페이스, 컬렉션을 통해 관리한다.
 *             *** 정수 10개    => 배열
 *             *** 클래스 10개   => 컬렉션 ==> 배열의 단점을 보완한 것.
 * 
 *          ==> 변수의 종류   
 *             ---- 메서드에서만 사용이 가능하다. ----
 *             1. 지역 변수    : 메서드 안에 선언되는 변수 => 루프 변수, 결과 값 전송하는 변수
 *             2. 매개 변수    : 사용자가 보내준 요청 (사용자 요청 값)
 *                => 3개 이상을 초과하지 않는다. ==> 초과하면 배열 / 클래스 이용
 * 
 *             ---- 프로그램 종료시까지 사용이 가능하다. (다른 클래스에서 사용이 가능하다) ----
 *             3. 인스턴스   : 메모리 공간이 따로 생기는 공간 => new 사용 시 마다 생성
 *             4. 공유 변수   : 모든 객체가 공통으로 사용 가능 => 한 개의 메모리 생성
 *               (정적 변수)
 *             ------------
 *             
 *             -------------- Method Area ---------------
 *                Method가 저장 (Method는 메서드 명이 주소이다)      
 *             ---------------- Stack -------------------
 *                메모리 자체 관리 => {} 끝나면 자동으로 회수한다.
 *                   지역 변수 / 매개 변수            
 *             ----------------- Heap -------------------
 *                인스턴스 변수 => new
 *                클래스 / 배열
 *                프로그래머가 관리 => 메모리 해제 (객체가 null인 경우, 사용하지 않는 경우) ==> GC
 *                   new       => delete
 *                   malloc() => free()
 *                   => 자동 메모리 회수기를 이용한다. (가비지 컬렉션 / GC)
 * 
 *             ------------------------------------------
 *          =>   사용자 요청에 따라서 제어한다.
 *             -----------------------
 *                1) 연산자
 *                   단항연산자
 *                      = 증감연산자      ==> 게임에 주로 사용(총알이나 캐릭터 좌표가 변경되는 것을 구현)
 *                      = 부정연산자 [<>]   ==> String findData = "";
 *                                     if (data.contains(findData))   => [LIKE, REGEXT_LIKE()]
 *                                     if (!data.contains(fianData))
 *                                  => 대부분 오라클 명령어를 이용하여 데이터 추출 ==> 데이터를 영구적으로 저장하고, 데이터를 공유할 수 있기 때문에.
 *                                 
 *                      = 형변환연산자 -중요-> (클래스도 데이터형이다) => 라이브러리 / 사용자정의가 될 수 있다.
 *                          왼쪽에서 받는 변수 (클래스)가 크거나 같아야 한다   
 *                          -------------------------------------
 *                          값을 받는 데이터 = 대입할 값
 *                          -------------------------------------
 *                          
 *                          기본 데이터형 크기
 *                                 -------------------------> UPCasting : 자동 형변환
 *                          byte < char < int < long < float < double
 *                                 <------------------------- DownCasting : 강제 형 변환
 *                          
 *                          클래스 크기 : 상속 / 포함
 *                          상속을 받는 클래스 < 상속을 내리는 클래스
 *                          포함하고 있는 클래스 > 포함된 클래스
 *                          
 *                          클래스가
 *                          ↑ 위로올라갈수록 공통점이 많다   : 추상화
 *                          ↓ 아래로 내려갈수록 구체화가 된다 : 구현
 *                          상속도 => 확장해서 기능 변역, 기능 추가해서 사용하는 과정
 *                          => extends
 *                          
 *                          모든 클래스는 Object 로 부터 상속을 받는다
 *                                    ------
 *                                    | 가장 큰 클래스 => 리턴형 Object 면 항상 형변환을 해서 사용한다
 *                                                                  -----------------
 *                                                                  | 프로그램에 맞게 변경 : 제네릭 <클래스>
 *                                                                   
 *                          
 *                   이항연산자 => 형변환 (자동)
 *                       *** 프로그램언어는 연산시에 같은 데이터형만 연산이 가능하다
 *                      
 *                   비교연산자 => 조건 / 반복문 에서 주로 쓰인다 결과값은 boolean 형이다
 *                       ( ==, !=, <, >, <=, >=)
 *                       ----- 같다
 *                       오라클 =  ,  자바스크립트 ===
 *                       같지않다<>
 *                   --------------------------------- 이클립스 : Back-End 편집기
 *                                                  => Front-End 단점 : 도움말이 없다
 *                                                                     에러가 뜨지 않고 화면이 그냥 안나와버린다 
 *                                                                         (때문에 에러 잡기가 어려움)
 *                   논리연산자 ( &&, || ) 결과값 boolean
 *                     => 두개의 조건이 있는 경우 처리
 *                         && => 두개의 조건이 true 일 경우에만 true
 *                         || => 두개의 주건중 하나라도 true면 true
 *                                                 
 *                   대입연산자 ( =, +=, -=)
 *                       =+ 누적시에 주로 사용 문자열 누적, 정수 누적 ...)
 *                       a+10;  ====> a=a+10
 *                       ----------------------   
 *                                                                                
 *                   삼항연산자 : if ~ else 
 *                       조건? 값1 : 값2
 *                       조건 true => 값1
 *                       조건 false => 값2
 *                       => 자바에서는 if ~ else 사용 빈도가 많다 
 *                       => 삼항연산자는 주로 웹에서 사용
 *                          웹에서 주로 사용하는 이유
 *                              -> 웹은 자바+HTML 인데 그 둘을 구분해야한다
 *                                    ---------> 구분
 *                                             <% 자바소스 %> HTML
 *                      ex1)
 *                          <%
 *                              int curapge=1;
 *                              int totalpage=10;
 *                              
 *                              if (curpage>1) 이전
 *                              {
 *                              curpage--;
 *                          %>
 *                              <a href="list.jsp?page=<%=curpage%>">
 *                          <%
 *                              }
 *                              if (curpage<totalpage) 다음
 *                              {
 *                                  curpage++;
 *                          %>
 *                              <a href="list.jsp?page=<%=curpage%>">
 *                          <%
 *                              }
 *                          %>
 *                          
 *                       ex2) (삼항연산자를 이용해서 ex1 소스를 줄인것)
 *                           <a href="list.jsp?page=<%=curpage>1?curpage--:curpage%>">이전
 *                           <a href="list.jsp?page=<%=curpage<totalpage?curpage++:curpage%>"> 다음
 *                           
 *                   => 자바 + HTML 혼자작업 => JSP => 혼자 작업하는거다 보니 작은 사이트 제작시 사용
 *               
 *                   => 자바 / HTML  => 분리  => MVC    나눠서 처리하는구조를 MVC 구조라고 한다 / 큰 사이트제작시 사용
 *                           |     |
 *                         Back   Front     Front 에도 제어문을 사용하기 위해 JavaScript 가 들어왔다
 * ===========================================  공부 1일차  ===========================================
 * ===========================================  공부 1일차  ===========================================          
 *                2) 제어문
 *                    -조건문 (if)
 *                        - 단일 조건문
 *                            if(조건) => 조건 (결과값 : true/false) => 부정 / 비교 / 논리
 *                            {
 *                                조건 true일때 수행하는 문장
 *                            }
 *                              => 독립적으로 되어있다 => 여러개 사용시에는 속도가 늦다
 *                                                  ---------- 1번 / 여러번 수행
 *                              => 웹 : 사용자가 요청값을 전송했는지 여부
 *                                     ------------------------
 *                                     사용자가 입력을 했는지 여부 ...
 *                                   => 오라클에 NOT NULL => 무조건 모든 값이 있어야 한다
 *                                            ---------
 *                                            *(필수입력) , "아이디를 입력하세요." 창들 == NOTNULL
 *                                   => 유효성 검사 : 입력여부 확인 / 제한된 값                                     
 *                    - 선택 조건문
 *                            if(조건)
 *                            {
 *                                조건 true 일때 수행문장
 *                            }
 *                            else
 *                            {
 *                                조건 flase 일때 수행문장
 *                            }
 *                             => 웹에서 많이  등장
 *                             => 웹 무조건 브라우저로 결과값 전송
 *                                 => 정상
 *                                 => 비정상 
 *                             ex)
 *                                 로그인 성공 if     => main.jsp 이동
 *                                 로그인 실패 else   => id,비밀번호 틀리다 
 *                                 
 *                    - 다중 조건문 : 해당되는 1개의 조건만 수행
 *                            if(조건)
 *                            {
 *                                조건 : true => 문장을 수행하고 종료
 *                                조건 : false => 밑에있는 조건을 검색
 *                            }    
 *                            else if (조건)
 *                            {
 *                                조건 : true => 문장을 수행하고 종료
 *                                조건 : false => 밑에있는 조건을 검색
 *                            }
 *                            else if (조건)
 *                            {
 *                                조건 : true => 문장을 수행하고 종료
 *                                조건 : false => 밑에있는 조건을 검색
 *                            }
 *                               . . . 
 *                            else
 *                            {
 *                                해당 조건이 없는 경우 => 수행하는 문장 
 *                                default : 생략이 가능
 *                            }
 *                            
 *                            => 조건에 맞는 모든 수행 => 단일 조건문 여러개
 *                            => 조건에 맞는 문장 한개 => 다중 조건문을 사용한다
 *                            => 오라클에서 어려운 부분 => 다중 조건이 있는 경우
 *                            
 *                            
 *                -반복문 (for,while) : 화면출력 => HTML(JSP)
 *                        for, for-each : 반복 횟수가 지정되면
 *                                       
 *                       for 형식)      1    2    4
 *                            for(초기값;조건식;증가식) {  // 조건식이 false 면 종료
 *                                       |
 *                                     실행문장 3
 *                            }
 *                            
 *                            => 초기값을 증가해서 조건이 false 일때 수행
 *                            => 초기값 => 조건식 => 실행문장 => 증가식 
 *                                       조건식 => 실행문장 => 증가식
 *                                             .   .   . 
 *                                       조건식 => 실행문장 => 증가식
 *                                         |
 *                                       false면 종료      
 *                            => 자바에서 반복문 필요시에는 일반 for 문이 많다
 *                            
 *                   for-each 형식)
 *                           for(데이터형 변수: 배열,컬렉션) {
 *                               실행문장 => 변수는 실제 저장된 데이터값을 가지고 온다
 *                               **** 데이터형 = 배열, 컬렉션에 저장된 데이터형이 동일, 크다
 *                           }
 *                           
 *                           => 웹에서 출력시는 대부분이 => for-each 를 사용한다
 *                           
 *                   2차 for )
 *                           => 자바 개발때 사용되는 빈도수는 적다
 *                              -------------------------
 *                           => 코딩테스는 (80%)
 *                           
 *                              코딩테스트 / 기술면접 / 테스트지
 *                                 |        |        |    
 *                                 |        |     코딩테스트 + 기술면접 => 시험지
 *                                 |      일반 중소기업 (SI/SM)
 *                              중견업체 
 *                             ------------------------------
 *                           for(초기값;조건식;증감식) { // 줄 수
 *                           	for(초기값;조건식;증감식) { // 한 줄에 몇개의 데이터 출력
 *                           
 *                           	}
 *                           }
 *                               
 *                           수열 ---- 방적식 => 산수
 *                           for => 패턴이 있는 경우에만 수행
 *                                 ----- 숫자의 패턴을 '수열'이라고 한다
 *                        
 *                            => 중복없는 난수 할때 사용 
 *                                         
 *                    while : 반복 횟수가 없는 경우
 *                            => 무한스크롤
 *                            => 데이터 베이스 : 반복횟수를 알 수 없다
 *                              => 게시판 / 회원
 *                                 ---------- 데이터가 없을때까지 반복 rs.next()
 *                                                              ---------
 *                      while 형식)
 *                          초기값 =============1
 *                          while(조건문) { ====2
 *                          	실행문장 ========3
 *                          	증감식  ========4===> 2번으로 이동
 *                          }
 *                       
 *                       while 형식2)
 *                           while(조건문) => 데이터베이스에서 주로 사용
 *                           {
 *                               실행문장
 *                           }
 *                           
 *                           => 무한루프  => 반드시 종료 조건을 설정한다 
 *                               for(;;)
 *                               while(true)
 *                               
 *                    -반복 제어문 (break)
 *                    
 *                    
 *         => 묶기 시작 ==> 한 개의 이름으로 제어 ===> 소스가 간결해지고, 유지 보수가 편해진다.
 *             1) 관련되는 명령문을 묶어서 사용 => 재사용 / 반복 제거 / 에러, 기능 추가 편리하고 쉬움
 *              ----------------------- 메서드
 *              
 *              자바 : Kotlin , 스칼라 , Dart , GO , C#
 *                    ------------
 *                    잘 모르면 자바 import 가능
 *              C언어 : C++ , Pyton , Oracle
 *              
 *         =>  배열 : 일차원 배열
 *           -----------------
 *           1. 선언
 *               데이터형[] 배열명; ==> 권장
 *           2. 초기값
 *               데이터형[] 배열명 = {값,값...}
 *               데이터형[] 배열명 =new 데이터형[갯수]; => 기본값으로 초기화
 *           3. 값 변경
 *               인덱스 => 0번부터 시작
 *               배열명[0] = 값
 *           4. 출력
 *              for-each : 출력 전용
 *              값을 변경 => 일반 for 인덱스번호를 이요해서 처리=> 0
 *              
 *           => 단점
 *               고정적 => 한번 지정하면 변경이 어렵다 (저장 갯수)
 *               -------------------------------------
 *               갯수가 틀린 경우에 처리하기 어렵다
 *               검색, 데이터베이스 프로그램은 배열사용이 어렵다 =ㅣ가변형 (컬렉션)
 *               
 *           => 컬렉션 (ArrayList)
 *                   -----------
 *            *** 명령문을 모아서 관리 => 메소드
 *                리턴형 : 요청에 대한 처리값
 *                    1) 기본형 => int, String ===> 총 페이지 / 로그인 여부
 *                    2) 데이터가 여러개 => ArrayList  ==> SELECT
 *                       ---------- 목록 / 검색
 *                    3) 관련된 데이터 : 사용자 정의 데이터형  ==> SELECT에서 조건이 있는 경우
 *                       ---------- 상세 보기
 *                매개변수 : 사용자가 요청한 값 => 입력 / 클릭
 *                메소드명 : 약속 => 소문자로 시작 / 운영체제의 호환 => 알파벳을 이용한다
 *                       => cp949 , euc-kr , utk-8         
 *             1) 형식
 *                 [접근지정어][제어어] 리턴형 메소드명 (매개변수목록) => 선언부
 *                 {
 *                     구현부
 *                     return 값; ==> void일때만 생략이 가능
 *                 }
 *               
 *               = 접근지정어 : 특별한 경우가 아니면 => public
 *                         다른클래스 통신을 할 수 있게 한다
 *               = 제어어 : static => 공통 사용기반 => 데이터베이스 (MyBatis)
 *                        abstract =>선언하는 메소드 => 프로그램에 맞게 구현해서 사용
 *             2) 종류
 *                 리턴형   | 매개변수
 *           -------------|--------------
 *                  o     |    o       => 가장 많이 사용
 *                  o     |    x       => 자체에서 처리 결과
 *          -------------   --------------------------- SELECT
 *                  x     |    o	   => 데이터 베이스
 *                  x     |    x       => 빈도수가 거의 없다
 *          -------------   --------------------------- INSERT / UPDATE / DELETE
 *          
 *          사용자 요청 => 검색 결과를 브라우저에 출력해 달라
 *            => 리턴형 / 매개변수
 *                |       |
 *                |     String => 검색어
 *             ArrayList
 *             
 *             ex) 
 *                 맛집의 상세보기
 *               => 리턴형 / 매개변수
 *                    |      |
 *                    |     맛집번호 => int
 *                  Food
 *             ex)
 *                 로그인 요청
 *               => 리턴형 / 매개변수
 *                    |      | 
 *                    |    id,pwd
 *                  String
 *                  경우의 수
 *                  1) ID가 없는 경우
 *                  2) 비밀번호가 틀린경우
 *                  3) ID,비밀번호가 맞는경우
 *                  (경우의 수가 2개가 넘어가면 boolean을 사용할 수 없다)        
 *                         
 *                Board 에 등록
 *                  => 리턴형 / 매개변수
 *                     ----   -----  이름, 제목 , 내용, 비밀번호
 *                       |            ------------------------클래스로 묶어서 전송
 *                   없는 경우에는 void
 *           
 *              3) 클래스
 *                  => 구성요소 , 역할
 *                    class ClassName {
 *                     => 반드시 설정 (접근 범위) => 접근지정어
 *                    -------------------------------
 *                      변수  
 *                          인스턴스 => new 사용시마다 새로운 메모리 생성
 *                          [접근지정어] 데이터형 변수명
 *                                          ----;
 *                           private
 *                                          기본형
 *                                          배열
 *                                          클래스 => String
 *                          ================ 인스턴스 변수를 기본
 *                          공유변수 (정적변수 => static => 한 개만 생성이 가능 : 데이터 묶음 (모든 클라이언트가 동일)
 *                    -------------------------------
 *                      생성자,  초기화블록
 *                      ----   ------
 *                       | 
 *                     없는 경우도 존재 => 생성자는 없는 경우에 자동을 디폴트 생성자 추가
 *                     -----------
 *                     변수가 명시적인 초기화 가능 시에는 생성자 x
 *                     명시적인 초기화가 아니라 구현후에 초기화시에는 사용
 *                     
 *                     => 파일읽기 => 데이터 초기화
 *                     => 데이터베이스에서 데이터 읽기
 *                    
 *                    ☆☆☆☆☆ 클래스 
 *                    class CallName {
 *                        try{
 *                        
 *                        }catch(Exception e) {
 *                        
 *                        }
 *                    }
 *                     
 *                     => 가급적이면 인스턴스 초기화 => 생성자
 *                     
 *                        static 초기화 => static{}
 *                     => 데이터베이스 드라이버 등록
 *                        화면 UI
 *                        시작과 동시에 처리하는 명령문이 있는경우
 *                     => 생성자 => public 을 사용한다 => 다른 클래스에서 연결
 *                    -------------------------------
 *                      메소드
 *                    -------------------------------
 *                    }
 *                  => 클래스 종류
 *                    - 추상클래스
 *                    - 인터페이스
 *                  => 객체지향의 3대 특성 (권장사항)
 *                    - 데이터 보호 (캡슐화) ☆☆☆☆☆ 시큐어 코딩의 기본
 *                      = 데이터 은닉화 -> 메소드로 접근
 *                         private     getter,setter  ==> lombok(소스상엔 안보이지만 메모리상에 저장) => Spring에서는 자동 첨부
 *              	  - 재사용 (상속/포함)
 *                    - 추가,수정 : 오버로딩, 오버라이딩
 *         =>    메서드 + 변수 묶어서 사용
 *             ------------------- 클래스 
 *         =>    만들지 못하는 기능 : 자바에서 클래스를 지원해준다 => 라이브러리
 *         =>    다른 프로그램과 연동
 *            ---------------
 *               1. 오라클 연동   
 *                  => 오라클 명령어 사용법   ==> JDBC
 *               2. 브라우저 연동
 *                 ----------- 웹 사이트가 제작
 *             _________________________________________________________
 *                     사용자 요청          요청된 데이터 읽기
 *             브라우저 ------------> 자바 ----------------> 오라클
 *                   <------------     <---------------
 *                      화면 출력          응답 데이터를 보내준다                
 *             _________________________________________________________ 통합 ( 스프링 )
 *
 * 
 * 
 *         ==> 자바의 최종 과정 ===> 네트워크      : 게임
 *                               데이터베이스   : 웹      *** 우리 과정의 주요 내용
 *                                  
 */
import java.util.*;
class Human {
	public void display() {
		System.out.println("Human:display() call");
	}
}
class Sawon {
	public void aaa() {
		System.out.println("Sawon : aaa() call...");
	}
	public void bbb() {
		System.out.println("Sawon : bbb() call...");
	}
	public void ccc() {
		System.out.println("Sawon : ccc() call...");
	}
}
public class 최종정리 {
	public static void main(String[] args) throws Exception{
		Human h1=new Human(); // new 사용 결합성이 높다. -> 다른 클래스에 영향이 간다
		h1.display();
		Human h2=new Human().getClass().getDeclaredConstructor().newInstance();
		h2.display();
		Human h3=Human.class.getDeclaredConstructor().newInstance();
		h3.display();
//		==================== 가장 많이 사용되는 메모리 할당 : 스프링에서 주로 사용
		Class clsName=Class.forName("com.sist.main.Human");
		Method[] methods=clsName.getDeclaredMethods();
		Human h4=(Human)clsName.getDeclaredConstructor().newInstance();
		System.out.println("메소드명 없이 호출");
		methods[0].invoke(h4, null); // methods[0] 을  invoke = 호출하라 
//		↑ 매개변수
		System.out.println("메소드명으로 호출");
		h4.display();
		
//		int[] arr = new int[10];
//		for(int i=0; i<arr.length; i++){
//			arr[i] = i+1;
//		}
//		System.out.println(Arrays.toString(arr));
//		
////		Stack
//		for(int i=arr.length-1; i>=0; i--) {
//			System.out.print(arr[i]+" ");
//		}
//		System.out.println();
////		Queue
//		for(int i=0; i<arr.length; i++) {
//			System.out.print(arr[i]+" ");
//		}
		Class cls = Class.forName("com.sist.main.Sawon");
		Object obj = cls.getDeclaredConstructor().newInstance();
		Method[] ms=cls.getDeclaredMethods();
		Scanner scan=new Scanner(System.in);
		System.out.print("호출할 메소드명 입력 : ");
		String mName= scan.next();
//		Annotation => 구분자를 만들때 나오는 명령어 ==> Spring 에서는 우리에게 제공해줌
//		메소드 위에 @오버라이드  가 바로 Annotation(어노테이션) 이다
		
		for(int i=0; i<ms.length; i++) {
			String s=ms[i].getName();
			if(mName.equals(s)) {
//				System.out.println(i+";"+ms[i].getName());
				ms[i].invoke(obj, null);
//			invoke => 메소드 호출     ----> null 값이 매개변수
			}
		}
	}

}